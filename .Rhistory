conf_1 <- confint(model2_2)
## location part ----
coefs_1_loc <- summary_1$coefficients$cond
conf_1_loc <- conf_1[grep("^cond", rownames(conf_1)), ]
rownames(conf_1_loc) <- gsub("^cond\\.", "", rownames(conf_1_loc))
conf_1_loc <- conf_1_loc[rownames(conf_1_loc) %in% rownames(coefs_1_loc), ]
match_loc <- match(rownames(coefs_1_loc), rownames(conf_1_loc))
results_1_loc <- data.frame(
Term = rownames(coefs_1_loc),
Estimate = coefs_1_loc[, "Estimate"],
StdError = coefs_1_loc[, "Std. Error"],
CI_low = conf_1_loc[match_loc, "2.5 %"],
CI_high = conf_1_loc[match_loc, "97.5 %"]
)
colnames(results_1_loc)[which(names(results_1_loc) == "X2.5.")] <- "CI_low"
colnames(results_1_loc)[which(names(results_1_loc) == "X97.5.")] <- "CI_high"
## dispersion part ----
coefs_1_disp <- summary_1$coefficients$disp
conf_1_disp <- conf_1[grep("^disp", rownames(conf_1)), ]
rownames(conf_1_disp) <- gsub("^disp\\.", "", rownames(conf_1_disp))
conf_1_disp <- conf_1_disp[rownames(conf_1_disp) %in% rownames(coefs_1_disp), ]
match_disp <- match(rownames(coefs_1_disp), rownames(conf_1_disp))
results_1_disp <- data.frame(
Term = rownames(coefs_1_disp),
Estimate = coefs_1_disp[, "Estimate"],
StdError = coefs_1_disp[, "Std. Error"],
CI_low = conf_1_disp[match_disp, "2.5 %"],
CI_high = conf_1_disp[match_disp, "97.5 %"]
)
colnames(results_1_loc)[which(names(results_1_disp) == "X2.5.")] <- "CI_low"
colnames(results_1_loc)[which(names(results_1_disp) == "X97.5.")] <- "CI_high"
# display results ----
gt(results_1_loc) %>%
tab_header(title = "Location-scale model (location part)") %>%
fmt_number(columns = everything(), decimals = 3) %>%
cols_label(
Term = "Term",
Estimate = "Estimate",
StdError = "Std. Error",
CI_low = "95% CI (low)",
CI_high = "95% CI (high)"
) %>%
cols_align(align = "center", columns = everything())
gt(results_1_disp) %>%
tab_header(title = "Location-scale model (dispersion part)") %>%
fmt_number(columns = everything(), decimals = 3) %>%
cols_label(
Term = "Term",
Estimate = "Estimate",
StdError = "Std. Error",
CI_low = "95% CI (low)",
CI_high = "95% CI (high)"
) %>%
cols_align(align = "center", columns = everything())
#| label: fit1_results - model2 - brms
#| echo: false
results_df1 <- posterior_summary(fit1) %>%
as.data.frame() %>%
tibble::rownames_to_column("term") %>%
filter(grepl("^b_|^sd_|^cor_", term) | term == "sigma") %>%
filter(!term %in% c("b_sigma_Intercept", "b_sigma_RANK2")) %>%
mutate(
Term_Display = case_when(
term == "b_Intercept" ~ "Intercept",
term == "b_RANK2" ~ "Second hatched chick",
term == "sd_NEST__Intercept" ~ "Nest ID ",
term == "sd_WORKYEAR__Intercept" ~ "Year ",
term == "sigma" ~ "Sigma",
TRUE ~ term
),
Order_Rank = case_when(
term == "b_Intercept" ~ 1,
term == "b_RANK2" ~ 2,
term == "sd_NEST__Intercept" ~ 3,
term == "sd_WORKYEAR__Intercept" ~ 4,
term == "sigma" ~ 5,
TRUE ~ 99
),
Submodel = case_when(
Order_Rank %in% 1:2 ~ "Location Model",
Order_Rank %in% 3:4 ~ "Random Effects",
Order_Rank == 5 ~ "Residual Standard Deviation",
TRUE ~ NA_character_
)
) %>%
filter(!is.na(Submodel)) %>%
arrange(Order_Rank) %>%
dplyr::select(
Submodel,
Term = Term_Display,
Estimate = Estimate,
`Std.error` = Est.Error,
`95% CI (low)` = Q2.5,
`95% CI (high)` = Q97.5
) %>%
gt(groupname_col = "Submodel") %>%
tab_header(
title = "Model 1: Posterior Summary"
) %>%
fmt_number(
columns = c(Estimate, `Std.error`, `95% CI (low)`, `95% CI (high)`),
decimals = 3
) %>%
cols_align(
align = "center",
columns = everything()
)
#| label: show_data
#| fig-width: 8
#| fig-height: 6
set.seed(42)
# load the dataset ----
dat_pref <- read.csv(here("data", "AM_preference.csv"), header = TRUE)
dat_pref <- dat_pref %>%
dplyr::select(-stripe, -full, -subset) %>%
rename(frequency = dot) %>%
mutate(species = phylo, across(c(condition, sex), as.factor))
ggplot(dat_pref, aes(x = condition,
y = frequency)) +
geom_violin(color = "#8B8B83", fill = "white",
width = 1.2, alpha = 0.3) +
geom_jitter(aes(shape = sex, color = sex),
size = 3, alpha = 0.8,
width = 0.15, height = 0) +
labs(
title = "Total frequency of gazes towards dot patterns",
x = "Condition",
y = "Total frequency of gazes (1hr)"
) +
scale_shape_manual(values = c("M" = 17, "F" = 16),
labels = c("M" = "Male", "F" = "Female")) +
scale_color_manual(values = c("M" = "#009ACD", "F" = "#FF4D4D"),
labels = c("M" = "Male", "F" = "Female")) +
theme_classic(base_size = 16) +
theme(
axis.text = element_text(color = "#6E7B8B", size = 14),
axis.title = element_text(color = "#6E7B8B", size = 14),
legend.title = element_text(color = "#6E7B8B"),
legend.text = element_text(color = "#6E7B8B"),
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1)
)
#| label: show_data2
#| fig-width: 8
#| fig-height: 6
ggplot(dat_pref, aes(x = condition, y = frequency)) +
geom_point(alpha = 0.5) +
labs(
title = "Total frequency of gazes towards dot patterns by species",
x = "Condition",
y = "Total frequency of gazes (1hr)"
) +
stat_summary(fun = mean, geom = "line", aes(group = species, color = species)) +
theme_classic() +
facet_wrap(~ species)
#| label: model_fitting1 - nb model
# location model ----
## the mean (location) of gaze frequency with condition and sex as fixed effects; assumes constant variance.
model_0 <- glmmTMB(
frequency ~ 1 +  condition + sex + (1 | species) + (1 | id), # location part (mean)
data = dat_pref,
family = nbinom2(link = "log")
)
summary(model_0)
confint(model_0)
#| label: residual_diagnostics - nb model
# location-only model (NB) ----
# main diagnostic plots
model0_res <- simulateResiduals(model_0, plot = TRUE, seed = 42)
# formal test for over/underdispersion
testDispersion(model0_res)
#| label: model_fitting 2 - nb model
# location-scale model ----
# both the mean (location) and the variance (scale) as functions of condition and sex.
model_1 <- glmmTMB(
frequency ~ 1 + condition + sex + (1 | species) + (1 | id),
dispformula = ~ condition + sex,
data = dat_pref,
family = nbinom2(link = "log")
)
summary(model_1)
confint(model_1)
#| label: model_comparison - nb model
# compare models ----
model.sel(model_0, model_1)
#| echo: false
#| label: model0_results - nb model
# Location-only model (Model 0) ----
coefs_0 <- summary(model_0)$coefficients$cond
conf_0 <- confint(model_0)
rownames(conf_0) <- gsub("^cond\\.", "", rownames(conf_0))
conf_0 <- conf_0[rownames(conf_0) %in% rownames(coefs_0), ]
match_0 <- match(rownames(coefs_0), rownames(conf_0))
results_0 <- data.frame(
Term = rownames(coefs_0),
Estimate = coefs_0[, "Estimate"],
StdError = coefs_0[, "Std. Error"],
`2.5%` = conf_0[match_0, "2.5 %"],
`97.5%` = conf_0[match_0, "97.5 %"]
)
colnames(results_0)[which(names(results_0) == "X2.5.")] <- "CI_low"
colnames(results_0)[which(names(results_0) == "X97.5.")] <- "CI_high"
gt(results_0) %>%
tab_header(title = "Location-only model") %>%
fmt_number(columns = everything(), decimals = 3) %>%
cols_label(
Term = "Term",
Estimate = "Estimate",
StdError = "Std. Error",
CI_low = "95% CI (low)",
CI_high = "95% CI (high)"
) %>%
cols_align(align = "center", columns = everything())
#| label: model_fitting2 - model2 - glmmtmb
# location-scale model ----
model2_2 <- glmmTMB(
log(SMI) ~ 1 + RANK + (1|NEST)+(1|WORKYEAR),
dispformula = ~ 1 + RANK,
data = dat,
family = gaussian
)
summary(model2_2)
confint(model2_2)
#| label: model_comparison - model2 - glmmtmb
model.sel(model2_1, model2_2)
#| label: model1_result - model2 - brms
#| echo: false
fit1 <- readRDS(here("Rdata","mod1RED.rds"))
summary(fit1)
#| label: model2_result - model2 - brms
#| echo: false
fit2 <- readRDS(here("Rdata","mod2RED.rds"))
summary(fit2)
#| label: fit1_results - model2 - brms
#| echo: false
results_df1 <- posterior_summary(fit1) %>%
as.data.frame() %>%
tibble::rownames_to_column("term") %>%
filter(grepl("^b_|^sd_|^cor_", term) | term == "sigma") %>%
filter(!term %in% c("b_sigma_Intercept", "b_sigma_RANK2")) %>%
mutate(
Term_Display = case_when(
term == "b_Intercept" ~ "Intercept",
term == "b_RANK2" ~ "Second hatched chick",
term == "sd_NEST__Intercept" ~ "Nest ID ",
term == "sd_WORKYEAR__Intercept" ~ "Year ",
term == "sigma" ~ "Sigma",
TRUE ~ term
),
Order_Rank = case_when(
term == "b_Intercept" ~ 1,
term == "b_RANK2" ~ 2,
term == "sd_NEST__Intercept" ~ 3,
term == "sd_WORKYEAR__Intercept" ~ 4,
term == "sigma" ~ 5,
TRUE ~ 99
),
Submodel = case_when(
Order_Rank %in% 1:2 ~ "Location Model",
Order_Rank %in% 3:4 ~ "Random Effects",
Order_Rank == 5 ~ "Residual Standard Deviation",
TRUE ~ NA_character_
)
) %>%
filter(!is.na(Submodel)) %>%
arrange(Order_Rank) %>%
dplyr::select(
Submodel,
Term = Term_Display,
Estimate = Estimate,
`Std.error` = Est.Error,
`95% CI (low)` = Q2.5,
`95% CI (high)` = Q97.5
) %>%
gt(groupname_col = "Submodel") %>%
tab_header(
title = "Model 1: Posterior Summary"
) %>%
fmt_number(
columns = c(Estimate, `Std.error`, `95% CI (low)`, `95% CI (high)`),
decimals = 3
) %>%
cols_align(
align = "center",
columns = everything()
)
#| label: fit2_results - model2 - brms
#| echo: false
results_df2 <- posterior_summary(fit2) %>%
as.data.frame() %>%
tibble::rownames_to_column("term") %>%
filter(grepl("^b_|^sd_|^cor_", term)) %>%
mutate(
Term_Display = case_when(
term == "b_Intercept" ~ "Intercept",
term == "b_sigma_Intercept" ~ "Intercept (sigma)",
term == "b_RANK2" ~ "Second hatched chick",
term == "b_sigma_RANK2" ~ "Second hatched chick (sigma)",
term == "sd_NEST__Intercept" ~ "Nest ID",
term == "sd_WORKYEAR__Intercept" ~ "Year",
TRUE ~ term
),
Order_Rank = case_when(
term == "b_Intercept" ~ 1,
term == "b_RANK2" ~ 2,
grepl("^b_", term) & !grepl("sigma", term) ~ 3, # Other fixed effects (no sigma)
term == "b_sigma_Intercept" ~ 4,
term == "b_sigma_RANK2" ~ 5,
term == "sd_NEST__Intercept" ~ 6,
term == "sd_WORKYEAR__Intercept" ~ 7,
TRUE ~ 99
),
Submodel = case_when(
Order_Rank %in% 1:3 ~ "Location Submodel",
Order_Rank %in% 4:5 ~ "Scale Submodel",
Order_Rank %in% 6:7 ~ "Random effects",
TRUE ~ NA_character_ # No subtitle for other terms (SDs), though in this filter they might all fall into a category
)
) %>%
arrange(Order_Rank) %>%
dplyr::select(
Submodel, # Include Submodel column
Term = Term_Display,
Estimate = Estimate,
`Std.error` = Est.Error,
`95% CI (low)` = Q2.5,
`95% CI (high)` = Q97.5
) %>%
gt(groupname_col = "Submodel") %>%
tab_header(
title = "Model 2: Posterior Summary"
) %>%
fmt_number(
columns = c(Estimate, `Std.error`, `95% CI (low)`, `95% CI (high)`),
decimals = 3
) %>%
cols_align(
align = "center",
columns = everything()
)
#| echo: false
#| label: model0_results - nb model
# Location-only model (Model 0) ----
coefs_0 <- summary(model_0)$coefficients$cond
conf_0 <- confint(model_0)
rownames(conf_0) <- gsub("^cond\\.", "", rownames(conf_0))
conf_0 <- conf_0[rownames(conf_0) %in% rownames(coefs_0), ]
match_0 <- match(rownames(coefs_0), rownames(conf_0))
results_0 <- data.frame(
Term = rownames(coefs_0),
Estimate = coefs_0[, "Estimate"],
StdError = coefs_0[, "Std. Error"],
`2.5%` = conf_0[match_0, "2.5 %"],
`97.5%` = conf_0[match_0, "97.5 %"]
)
colnames(results_0)[which(names(results_0) == "X2.5.")] <- "CI_low"
colnames(results_0)[which(names(results_0) == "X97.5.")] <- "CI_high"
gt(results_0) %>%
tab_header(title = "Location-only model") %>%
fmt_number(columns = everything(), decimals = 3) %>%
cols_label(
Term = "Term",
Estimate = "Estimate",
StdError = "Std. Error",
CI_low = "95% CI (low)",
CI_high = "95% CI (high)"
) %>%
cols_align(align = "center", columns = everything())
#| label: show_data - beyond_gaussian2
#| fig-width: 8
#| fig-height: 6
dat <- read.csv(here("data","Lundgren_Cougar_Burro_Trophic_Cascade_Trampled_BareGround.csv"))
dat <- dat %>%
dplyr::select(Site, Pool, if_kill, cover) %>%
mutate(Site=as.factor(Site),
if_kill=as.factor(if_kill),
cover=as.numeric(cover)
)
str(dat)
ggplot(dat, aes(x = if_kill, y = cover, fill = if_kill)) +
geom_violin(
aes(fill = if_kill), # Fill violins based on 'if_kill'
color = "#8B8B83", # Outline color for violins
width = 0.8,
alpha = 0.3,
position = position_dodge(width = 0.7)
) +
geom_jitter(
aes(color = if_kill), # Color jittered points based on 'if_kill'
size = 3,
alpha = 0.4,
shape = 1, # Open circles for jittered points
position = position_jitterdodge(dodge.width = 0.5, jitter.width = 0.15)
) +
stat_summary(
fun = mean,
geom = "crossbar",
width = 0.1,
color = "black", # Black crossbar for mean
linewidth = 0.5,
position = position_dodge(width = 0.7)
) +
labs(
title = "Donkey Trampling by Cougar Kill Presence",
x = "Cougar Kill Presence",
y = "Proportion Trampled Bare Ground"
) +
scale_fill_manual(
values = c("burro kills absent" = "cornflowerblue", "burro kills present" = "firebrick")
) +
scale_color_manual( # Add scale_color_manual for jitter points
values = c("burro kills absent" = "cornflowerblue", "burro kills present" = "firebrick")
) +
scale_x_discrete(
labels = c("burro kills absent" = "No", "burro kills present" = "Yes"),
expand = expansion(add = 0.5)
) +
theme_classic(base_size = 16) +
theme(
axis.text = element_text(color = "#6E7B8B", size = 14),
axis.title = element_text(color = "#6E7B8B", size = 14),
legend.position = "none",
axis.text.x = element_text(angle = 0, hjust = 0.5)
)
#| label: show_data - beyond_gaussian2
#| fig-width: 8
#| fig-height: 6
dat <- read.csv(here("data","Lundgren_Cougar_Burro_Trophic_Cascade_Trampled_BareGround.csv"))
dat <- dat %>%
dplyr::select(Site, Pool, if_kill, cover) %>%
mutate(Site=as.factor(Site),
if_kill=as.factor(if_kill),
cover=as.numeric(cover)
)
str(dat)
ggplot(dat, aes(x = if_kill, y = cover, fill = if_kill)) +
geom_violin(
aes(fill = if_kill), # Fill violins based on 'if_kill'
color = "#8B8B83", # Outline color for violins
width = 0.8,
alpha = 0.3,
position = position_dodge(width = 0.7)
) +
geom_jitter(
aes(color = if_kill), # Color jittered points based on 'if_kill'
size = 3,
alpha = 0.4,
shape = 1, # Open circles for jittered points
position = position_jitterdodge(dodge.width = 0.5, jitter.width = 0.15)
) +
stat_summary(
fun = mean,
geom = "crossbar",
width = 0.1,
color = "black", # Black crossbar for mean
linewidth = 0.5,
position = position_dodge(width = 0.7)
) +
labs(
title = "Donkey Trampling by Cougar Kill Presence",
x = "Cougar Kill Presence",
y = "Proportion Trampled Bare Ground"
) +
scale_fill_manual(
values = c("burro kills absent" = "cornflowerblue", "burro kills present" = "firebrick")
) +
scale_color_manual( # Add scale_color_manual for jitter points
values = c("burro kills absent" = "cornflowerblue", "burro kills present" = "firebrick")
) +
scale_x_discrete(
labels = c("burro kills absent" = "No", "burro kills present" = "Yes"),
expand = expansion(add = 0.5)
) +
theme_classic(base_size = 16) +
theme(
axis.text = element_text(color = "#6E7B8B", size = 14),
axis.title = element_text(color = "#6E7B8B", size = 14),
legend.position = "none",
axis.text.x = element_text(angle = 0, hjust = 0.5)
)
#| label: model_fitting1_results - beyond_gaussian2
#| echo: false
fit0 <- readRDS(here("Rdata", "fit0_BETA_Burros.rds"))
summary(fit0)
#| label: model_fitting2_results - beyond_gaussian2
#| echo: false
fit1 <- readRDS(here("Rdata", "fit1_BETA_Burros.rds"))
summary(fit1)
#| label: call new covariable  - eg1
dat<- dat%>%
dplyr::mutate(ST_DATE=scale(ST_DATE,center=T,scale = F))
#| label: model_fitting2 - model2 - glmmtmb  - eg1
model2_2 <- glmmTMB(
log(SMI) ~ 1 + RANK + (1|NEST)+(1|WORKYEAR),
dispformula = ~ 1 + RANK,
data = dat,
family = gaussian
)
#| label: model_fitting2 add new covariable  - eg1
model2_3a <- glmmTMB(
log(SMI) ~ 1 + RANK + ST_DATE + (1|NEST)+(1|WORKYEAR),
dispformula = ~ 1 + RANK,
data = dat,
family = gaussian
)
#| label: model_fitting2 interaction  - eg1
model2_3b<- glmmTMB(
log(SMI) ~ 1 + RANK + ST_DATE + RANK*ST_DATE +(1|NEST)+(1|WORKYEAR),
dispformula = ~ 1 + RANK,
data = dat,
family = gaussian
)
